"""
This assumes data is generated by format_tercom.py
"""
import sys
import parse_pra_xml
from xml.sax.saxutils import unescape
import codecs


def read_file(file_path):
    with codecs.open(file_path, 'r', "utf-8") as fid:
        return [line.rstrip().split() for line in fid.readlines()]


assert len(sys.argv[:1]) == 1, "Expected one argument"
in_tercom_xml, in_hypothesis, in_reference, out_edit, out_align = sys.argv[1:]

# Read original files
hypothesis = read_file(in_hypothesis)
reference = read_file(in_reference)

# Parse tercom HTML
mt_tokens, pe_tokens, edits, hters = parse_pra_xml.parse_file(in_tercom_xml)

edit_actions = [[edit.o for edit in sent_edits] for sent_edits in edits]

edit_alignments = []
for sent_index, sent_edits in enumerate(edits):

    reference_index = 0
    hypothesis_index = 0
    edit_alignments_sent = []
    for edit in sent_edits:

        if edit.o == 'C':

            # Sanity check
            # NOTE: Tercom ignores case?
            if (
                hypothesis[sent_index][hypothesis_index].lower() !=
                reference[sent_index][reference_index].lower()
            ):
                raise Exception("Reading Tercom xml failed")

            edit_alignments_sent.append("-".join([
                str(reference_index),
                str(hypothesis_index)
            ]))

            reference_index += 1
            hypothesis_index += 1

        elif edit.o == 'S':

            edit_alignments_sent.append("-".join([
                str(reference_index),
                str(hypothesis_index)
            ]))

            reference_index += 1
            hypothesis_index += 1

        elif edit.o == 'I':
            reference_index += 1

        elif edit.o == 'D':
            hypothesis_index += 1

        else:
            raise Exception("Uknown edit %s" % edit.o)

    edit_alignments.append(edit_alignments_sent)

# Write files
with open(out_edit, 'w') as fid:
    for sent_edits in edit_actions:
        fid.write("%s\n" % (" ".join(sent_edits)))

with open(out_align, 'w') as fid:
    for sent_edits in edit_alignments:
        fid.write("%s\n" % (" ".join(sent_edits)))
